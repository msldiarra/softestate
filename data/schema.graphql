input AddOwnerInput {
  viewerId: String!
  company: String!
  customer: String!
  reference: String!
  firstName: String!
  lastName: String!
  phone: String!
  type: Int!
  clientMutationId: String!
}

type AddOwnerPayload {
  viewer: Viewer
  clientMutationId: String!
}

input AddPropertyInput {
  viewerId: String!
  reference: String!
  propertyType: Int!
  contractType: Int!
  description: String
  price: Int
  floorCount: Int
  roomCount: Int
  size: Float
  sizeUnit: String
  city: String
  neighborhood: String
  ownerRef: String!
  mediaNames: [String]
  clientMutationId: String!
}

type AddPropertyPayload {
  viewer: Viewer
  clientMutationId: String!
}

input AttachMediaInput {
  viewerId: String!
  uri: String!
  name: String!
  clientMutationId: String!
}

type AttachMediaPayload {
  viewer: Viewer
  clientMutationId: String!
}

type Contact implements Node {
  id: ID!
  first_name: String
  last_name: String
  info: ContactInfo
  credentials: [Login]
}

type ContactInfo implements Node {
  id: ID!
  phone: String
}

type Customer implements Node {
  id: ID!
  name: String
  contacts: [Contact]
}

scalar Date

input DeletePropertyInput {
  viewerId: String!
  propertyId: String!
  propertyReference: String!
  clientMutationId: String!
}

type DeletePropertyPayload {
  deletedPropertyID: String
  viewer: Viewer
  clientMutationId: String!
}

input EditOwnerInput {
  viewerId: String!
  reference: String!
  company: String!
  firstName: String!
  lastName: String!
  phone: String!
  type: Int!
  clientMutationId: String!
}

type EditOwnerPayload {
  viewer: Viewer
  clientMutationId: String!
}

input EditPropertyInput {
  viewerId: String!
  reference: String!
  propertyType: Int!
  contractType: Int!
  description: String
  price: Int
  floorCount: Int
  roomCount: Int
  size: Float
  sizeUnit: String
  city: String
  neighborhood: String
  ownerRef: String!
  mediaNames: [String]
  clientMutationId: String!
}

type EditPropertyPayload {
  viewer: Viewer
  clientMutationId: String!
}

type Location implements Node {
  id: ID!
  country: String
  city: String
  neighborhood: String
  searchTerms: String
}

type Login implements Node {
  id: ID!
  login: String
  password: String
  enabled: Boolean
}

type Media implements Node {
  id: ID!
  uri: String
  name: String
  mime_type: String
}

type MediasConnection {
  pageInfo: PageInfo!
  edges: [MediasEdge]
}

type MediasEdge {
  node: Media
  cursor: String!
}

type Mutation {
  addOwnerMutation(input: AddOwnerInput!): AddOwnerPayload
  editOwnerMutation(input: EditOwnerInput!): EditOwnerPayload
  addPropertyMutation(input: AddPropertyInput!): AddPropertyPayload
  editPropertyMutation(input: EditPropertyInput!): EditPropertyPayload
  deletePropertyMutation(input: DeletePropertyInput!): DeletePropertyPayload
  attachPropertyMediaMutation(input: AttachMediaInput!): AttachMediaPayload
}

interface Node {
  id: ID!
}

type Owner implements Node {
  id: ID!
  reference: String
  company: String
  type: String
  type_id: Int
  contact: Contact
  properties(after: String, first: Int, before: String, last: Int): PropertiesConnection
}

type OwnersConnection {
  pageInfo: PageInfo!
  edges: [OwnersEdge]
}

type OwnersEdge {
  node: Owner
  cursor: String!
}

type OwnerType implements Node {
  id: ID!
  label: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PlacesConnection {
  pageInfo: PageInfo!
  edges: [PlacesEdge]
}

type PlacesEdge {
  node: Location
  cursor: String!
}

type PropertiesConnection {
  pageInfo: PageInfo!
  edges: [PropertiesEdge]
}

type PropertiesEdge {
  node: Property
  cursor: String!
}

type Property implements Node {
  id: ID!
  name: String
  reference: String
  enabled: Boolean
  date: Date
  type_label: String
  type_id: Int
  contract_type: Int
  description: String
  size: Int
  size_unit: String
  floor_count: Float
  room_count: Float
  price: Int
  location: String
  city: String
  agency: String
  contact_phone: String
  neighborhood: String
  owner: Owner
  media(after: String, first: Int, before: String, last: Int): MediasConnection
}

type PropertyType implements Node {
  id: ID!
  label: String
}

type Query {
  node(id: ID!): Node
  viewer(viewerId: Int): Viewer
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  login: String
  email: String
  enabled: Boolean
  customer: String
  contact: Contact
  owners(after: String, first: Int, before: String, last: Int, search: String!): OwnersConnection
  properties(after: String, first: Int, before: String, last: Int, reference: String, city: String, contract_type: Int): PropertiesConnection
}

type Viewer implements Node {
  id: ID!
  user: User
  places(after: String, first: Int, before: String, last: Int, search: String!): PlacesConnection
  properties(after: String, first: Int, before: String, last: Int, reference: String, city: String, contract_type: Int): PropertiesConnection
}
